#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class ExpressionBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
        )
        config = config.replace(**settings)
        super().__init__(text, config=config)


class ExpressionParser(Parser):
    def __init__(self, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            keywords=KEYWORDS,
            start='arithmetic_expression',
        )
        config = config.replace(**settings)
        super().__init__(config=config)

    @tatsumasu()
    def _arithmetic_expression_(self):  # noqa
        self._test_()
        self._check_eof()

    @tatsumasu()
    def _test_(self):  # noqa
        self._or_test_()

    @tatsumasu('binary')
    def _or_test_(self):  # noqa
        self._and_test_()

        def block0():
            self._token('or')
            self._and_test_()
        self._closure(block0)

    @tatsumasu('binary')
    def _and_test_(self):  # noqa
        self._not_test_()

        def block0():
            self._token('and')
            self._not_test_()
        self._closure(block0)

    @tatsumasu('unary')
    def _not_test_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('not')
                self._not_test_()
            with self._option():
                self._comparison_()
            self._error(
                'expecting one of: '
                "'not' <comparison> <or_expr>"
            )

    @tatsumasu('binary')
    def _comparison_(self):  # noqa
        self._or_expr_()

        def block0():
            self._comparison_operator_()
            self._or_expr_()
        self._closure(block0)

    @tatsumasu('binary')
    def _or_expr_(self):  # noqa
        self._and_expr_()

        def block0():
            self._token('|')
            self._and_expr_()
        self._closure(block0)

    @tatsumasu('binary')
    def _and_expr_(self):  # noqa
        self._shift_expr_()

        def block0():
            self._token('&')
            self._shift_expr_()
        self._closure(block0)

    @tatsumasu('binary')
    def _shift_expr_(self):  # noqa
        self._arith_expr_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('<<')
                    with self._option():
                        self._token('>>')
                    self._error(
                        'expecting one of: '
                        "'<<' '>>'"
                    )
            self._arith_expr_()
        self._closure(block0)

    @tatsumasu('binary')
    def _arith_expr_(self):  # noqa
        self._term_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error(
                        'expecting one of: '
                        "'+' '-'"
                    )
            self._term_()
        self._closure(block0)

    @tatsumasu('binary')
    def _term_(self):  # noqa
        self._factor_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('/')
                    with self._option():
                        self._token('%')
                    self._error(
                        'expecting one of: '
                        "'%' '*' '/'"
                    )
            self._factor_()
        self._closure(block0)

    @tatsumasu('unary')
    def _factor_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('+')
                        with self._option():
                            self._token('-')
                        with self._option():
                            self._token('~')
                        self._error(
                            'expecting one of: '
                            "'+' '-' '~'"
                        )
                self._factor_()
            with self._option():
                self._power_()
            self._error(
                'expecting one of: '
                "'+' '-' '~' <atom> <power>"
            )

    @tatsumasu()
    def _power_(self):  # noqa
        self._atom_()
        with self._optional():
            self._token('^')
            self._factor_()

    @tatsumasu()
    def _atom_(self):  # noqa
        with self._choice():
            with self._option():
                self._NUMBER_()
            with self._option():
                self._STRING_()
            with self._option():
                self._function_()
            with self._option():
                self._variable_()
            with self._option():
                with self._group():
                    self._token('(')
                    self._test_()
                    self.name_last_node('@')
                    self._token(')')
            self._error(
                'expecting one of: '
                "'(' '[^'\\\\r\\n]*(?:\\.[^'\\\\r\\n]*)*'"
                '<NUMBER> <STRING> <function> <reference>'
                '<variable>'
                '[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?'
            )

    @tatsumasu()
    def _variable_(self):  # noqa
        self._reference_()

    @tatsumasu()
    def _function_(self):  # noqa
        self._reference_()
        self.name_last_node('ref')
        self._token('(')
        with self._optional():
            self._arglist_()
            self.name_last_node('args')
        self._token(')')

        self._define(
            ['args', 'ref'],
            []
        )

    @tatsumasu()
    def _arglist_(self):  # noqa

        def block0():
            self._argument_()
            self.add_last_node_to_name('@')
            self._token(',')
        self._closure(block0)
        self._argument_()
        self.add_last_node_to_name('@')

    @tatsumasu()
    def _argument_(self):  # noqa
        self._test_()

    @tatsumasu()
    def _reference_(self):  # noqa

        def block0():
            self._NAME_()
            self.add_last_node_to_name('@')
            self._token('.')
        self._closure(block0)
        self._NAME_()
        self.add_last_node_to_name('@')

    @tatsumasu()
    def _NUMBER_(self):  # noqa
        self._pattern('[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?')

    @tatsumasu()
    def _STRING_(self):  # noqa
        self._pattern("'[^'\\\\\\r\\n]*(?:\\\\.[^'\\\\\\r\\n]*)*'")

    @tatsumasu()
    def _comparison_operator_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('=')
                with self._option():
                    self._token('!=')
                with self._option():
                    self._token('<')
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('>')
                with self._option():
                    self._token('>=')
                with self._option():
                    self._token('in')
                with self._option():
                    self._token('is')
                self._error(
                    'expecting one of: '
                    "'!=' '<' '<=' '=' '>' '>=' 'in' 'is'"
                )

    @tatsumasu()
    def _NAME_(self):  # noqa
        self._pattern('\\w+')


class ExpressionSemantics:
    def arithmetic_expression(self, ast):  # noqa
        return ast

    def test(self, ast):  # noqa
        return ast

    def or_test(self, ast):  # noqa
        return ast

    def and_test(self, ast):  # noqa
        return ast

    def not_test(self, ast):  # noqa
        return ast

    def comparison(self, ast):  # noqa
        return ast

    def or_expr(self, ast):  # noqa
        return ast

    def and_expr(self, ast):  # noqa
        return ast

    def shift_expr(self, ast):  # noqa
        return ast

    def arith_expr(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def factor(self, ast):  # noqa
        return ast

    def power(self, ast):  # noqa
        return ast

    def atom(self, ast):  # noqa
        return ast

    def variable(self, ast):  # noqa
        return ast

    def function(self, ast):  # noqa
        return ast

    def arglist(self, ast):  # noqa
        return ast

    def argument(self, ast):  # noqa
        return ast

    def reference(self, ast):  # noqa
        return ast

    def NUMBER(self, ast):  # noqa
        return ast

    def STRING(self, ast):  # noqa
        return ast

    def comparison_operator(self, ast):  # noqa
        return ast

    def NAME(self, ast):  # noqa
        return ast


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = ExpressionParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, ExpressionParser, name='Expression')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
